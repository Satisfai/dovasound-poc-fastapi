name: Deploy Full-Stack FastAPI to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment for integration'
        default: 'dev'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Prepare env
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=180 -o ServerAliveCountMax=5 ec2-user@${{ secrets.EC2_HOST }} '
            mkdir -p ~/app
          '
          rsync -avz --progress ./ ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/app/
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=180 -o ServerAliveCountMax=5 ec2-user@${{ secrets.EC2_HOST }} '
            
            # delete frontend and backend containers and images
            docker ps -q \
              --filter "name=${{ vars.STACK_NAME }}-frontend-1" \
              --filter "name=${{ vars.STACK_NAME }}-backend-1" \
              --filter "name=${{ vars.STACK_NAME }}-adminer-1" \
              --filter "name=${{ vars.STACK_NAME }}-db-1" | xargs -r docker stop
            
            docker ps -aq \
              --filter "name=${{ vars.STACK_NAME }}-frontend-1" \
              --filter "name=${{ vars.STACK_NAME }}-backend-1" \
              --filter "name=${{ vars.STACK_NAME }}-adminer-1" \
              --filter "name=${{ vars.STACK_NAME }}-db-1" | xargs -r docker rm

            docker rmi frontend:latest backend:latest adminer:latest postgres:17
            docker image prune -f
          
            cd ~/app
            sudo cp ~/app/docker-compose.traefik.yml /root/code/traefik-public/docker-compose.traefik.yml
            sudo cp -r ~/app /root/code
          '

      - name: Starting dockers
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=180 -o ServerAliveCountMax=5 ec2-user@${{ secrets.EC2_HOST }} '
            sudo bash -c "
              export ENVIRONMENT=${{ vars.ENVIRONMENT }}
              export STACK_NAME=${{ vars.STACK_NAME }}
              export DOMAIN=${{ vars.DOMAIN }}

              export SECRET_KEY=$(openssl rand -hex 32)
              export FRONTEND_HOST=https://dasboard.${{ vars.DOMAIN }}
              export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
              export POSTGRES_DB=${{ secrets.POSTGRES_DB }}
              export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
              export DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
              export BACKEND_CORS_ORIGINS=https://dashboard.${{ vars.DOMAIN }},https://api.${{ vars.DOMAIN }}

              export FIRST_SUPERUSER=${{ secrets.FIRST_SUPERUSER }}
              export FIRST_SUPERUSER_PASSWORD=${{ secrets.FIRST_SUPERUSER_PASSWORD }}
              export EMAIL=jiayu.zhang@dovahealth.ca

              docker-compose -f /root/code/docker-compose.yml --project-name ${{ vars.STACK_NAME }} build
              docker-compose -f /root/code/docker-compose.yml --project-name ${{ vars.STACK_NAME }} up -d
            "
          '